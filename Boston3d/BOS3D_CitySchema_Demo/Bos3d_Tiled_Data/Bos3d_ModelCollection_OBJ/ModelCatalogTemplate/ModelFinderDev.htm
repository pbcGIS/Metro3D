<!DOCTYPE html>
<!-- This file is a self-contained HTML / javascript application that is intended for use as a 
     map-based finding-aid for a collection of 3D models.  The model collection is a folder full of zipped OBJ files packaged with their associated material and texture files.  Each OBJ package also contains a json file that preserves the model's catalog information.  In the same folder wil all of these OBJ packages, there is a catalog folder that contains this HTML page and three other resources:
        ModelCatalog_geojson.js   A catalog of the models as described in the data dictionary (included in the catalog folder.)
        Frame_geojson.js  A rectangular frame that defined the edge of the model collection (usually a square tile)
        Groundplan_2011.jpg  A groundplan reference map that is contemporary with the model collection 

    The two .js files are geojson files that have been turned into .js files by adding a variable declaration in the first line.  This allows the data to be read from local files, which would otherwise violate the 'Same-Origin restriction... \/*\/'.

    All of this amounts to a self-contained archival package that is intended to tell a person anything they would need to know to use the models in any sort of app or tool-chain that can read an OBJ file.
    
    For more information, visit www.pbcgis.com/metro3d

-->
<html>
<head>
  <meta charset=utf-8 />
  <title>Model Finder</title>
  <link rel="shortcut icon" type="image/x-icon" href="./js_css/favicon.ico" />

  <!-- This is where we load the catalog.js which initializes a geojson object, ModelCatalog that has a polygon feature for every 
       model in the associated models folder.  Each polygon is associated with all of the attributes for the model. The catalog file is shared as a plain JS file because web browsers don't allow loading local JSON files...  The conversion of json to js consists of adding a line, "var ModelCatalog = " at the top of the file.  Since the resulting variable is a JSON object, we can access pieces of it.  Like ModelCatalog.name will give us a nice title that identifies the Tile name and Issue Date.  ModelCatalog.features is the collection of attributed polygons.  -->
       <script src="./ModelCatalog_geojson.js" type="text/javascript"></script>
       <script src="./Frame_geojson.js" type="text/javascript"></script>

    <!-- Load local resources -->
    <link rel="stylesheet" href="./js_css/metro3d/BOS3D.css">
    <link rel="stylesheet" href="./js_css/leaflet/leaflet.css">
    <script src="./js_css/leaflet/leaflet.js"></script>
    <script src="./js_css/leaflet/Leaflet.ImageOverlay.Rotated.js"></script>
    <script src="./js_css/leaflet/leaflet-tilelayer-colorfilter.js"></script>
    <script src="./js_css/jquery/jquery-3.6.0.slim.min.js"></script>
    <!--script src="./js_css/leaflet/esri-leaflet.js"></script -->


  <style>

    #map { position: absolute; top:0; bottom:0; right:0; left:0; }

      table {
          border-collapse: collapse !important;
          border:none !important;
      }
      table.legend {
           margin-top: 6px;
           margin-bottom: 6px;
      }
      table td {
        border: none;
    }
      /* legend boxes */
      .legend span { border: 2px solid #ccc; 
        opacity: 0.7;
        float: left; 
        width: 16px; 
        height: 12px; 
        margin: 2px; 
        /* opacity:0.1; */
      }

</style>
</head>
<body>

<div class="wide_column" style="padding-top: 2px;">
  <h2 id="pagetitle">Model Finder</h2>
<p>Zoom in and click model outlines to see attributes and download link for each model.</p>
<div id="mapid" style="width: 100%; height: 450px;"></div>

<script>
  // ModelCatalog.name is part of the Catalog_geojson.js file that is loaded in the head section.
  document.getElementById('pagetitle').innerHTML = ModelCatalog.name ;

var frameStyle = {
      "color": "#ff5050",
      "weight": 2,
      "opacity": 100,
      "fillOpacity": 0
 };



function stylePicker(Status){
    var colorToUse;
    if (Status === "Current") colorToUse =  "grey"; //"#999966";
    else if (Status === "Under Construction") colorToUse = "darkcyan";//"#599C65";
    else if (Status === "Permitted") colorToUse = "green";
    else if (Status === "Board Approved") colorToUse = "lightgreen";
    else if (Status === "Permitted Demo") colorToUse = "orange";//"#4161BA";
    else if (Status === "Approved Demo") colorToUse = "gold"//"#46C7FA";
    else if (Status === "Demolished") colorToUse = "red";
    else if (Status === "Modified") colorToUse = "tomato";
    

    else colorToUse = "#000000";

    return {
      "leaflet": {
        "color": colorToUse,
        "weight": 1.5
      },
      "css": {
        "border-color": colorToUse,
        "border-width": 2
      }
    }
  }


// frame_geojson.js is a geojson file that begins with "let framepoly ="  
// Parse frame_geojson.js to get bounds and corner points for aligning the off-line image. 
// should be just one frame poly.
//
console.log('Frames has ' + framePoly.features.length + " 1 " + framePoly.features[0].geometry.type) ; 
// has 5 coordinates
console.log('Frame has ' + framePoly.features[0].geometry.coordinates[0].length + " Coordinate pairs"); 

let lats = [], lons = []
for (var j = 0; j < framePoly.features[0].geometry.coordinates[0].length; j++) {
    lons.push(framePoly.features[0].geometry.coordinates[0][j][0]);
    lats.push(framePoly.features[0].geometry.coordinates[0][j][1]);
    console.log(framePoly.features[0].geometry.coordinates[0][j][0],framePoly.features[0].geometry.coordinates[0][j][1])
  }

//     Because the tile polygons are rotated 0.6 degrees clockwise:
//     the south-east corner is going to have the lowest latitude (farthest south)
//     the south-West corner is going to have the lowest longidude (negative) (Farthest west)
//     the North-West corner is going to have the highest latitude  (Farthest North)
//     the North-East corner is going to have the highest longitude (negative) (Farthest East)
let sw_coord = [],
    nw_coord = [],
    ne_coord = [],
    se_coord = [];

    sortedlons = lons.sort(function(a, b){return a - b});
    sortedlats = lats.sort(function(a, b){return a - b});
    let numcoords = lats.length -1;
    //One coordinate of each corner can be determined by the sorted values 
    sw_coord[0] = sortedlons[0];            // most west longituude
    ne_coord[0] = sortedlons[numcoords];    // most East Longitude
    se_coord[1] = sortedlats[0];           // most south latitude
    nw_coord[1] = sortedlats[numcoords];    // most north latitude
    //The other coordinate can be found in the original frame coordinates by matching the now known mate.

  for (var j = 0; j < framePoly.features[0].geometry.coordinates[0].length; j++) {
      if (framePoly.features[0].geometry.coordinates[0][j][0] == sw_coord[0]) {
        sw_coord[1] = framePoly.features[0].geometry.coordinates[0][j][1];
      }
      if (framePoly.features[0].geometry.coordinates[0][j][0] == ne_coord[0]) {
        ne_coord[1] = framePoly.features[0].geometry.coordinates[0][j][1];
      }
      if (framePoly.features[0].geometry.coordinates[0][j][1] == se_coord[1]) {
        se_coord[0] = framePoly.features[0].geometry.coordinates[0][j][0];
      }
      if (framePoly.features[0].geometry.coordinates[0][j][1] == nw_coord[1]) {
        nw_coord[0] = framePoly.features[0].geometry.coordinates[0][j][0];
      }
  }

console.log("sw " + sw_coord + "\n" + "nw " + nw_coord + "\n" + "ne " + ne_coord + "\n" + "se " + se_coord);


  // We are going to divide the features form our geojson object, allocating them to layer groups according to their value of status. 
  // The lists of Status occurrences will be tabulated on the fly as the features are read from the geojson file. 
  
  var map = L.map('mapid', {minZoom: 11, zoomSnap: 0.5, maxZoom: 18}).setView([42.31591, -71.057], 11.25) ;


  // statusLgs will be a collection of layer groups that are used to group model footprints 
  //according to their Status. This collection of layer groups is built as we look through each 
  // feature in the ctalog_geojson.js.
  // This list is going to be used to draw the status check-boxes and wil be important fro keeping track of which layer groups are on or off. Each layer group wil also be associated with a count of the number of footprints.
  class statusLG {
  constructor(name, count, lGroup) {
    this.name = name;
    this.count = count;
    this.lGroup = lGroup;
    }
  }
  const statusLgs = {}; 
function onEachFeature(feature, layer) {
 
    //For each model footprint.  Check to see if a layergroup has been created for that staus already.
    // If not, create a layer group that is in a dictionary  
    // if the lg is not already in the dictionary, create a new one and add it to the map and the dictionary.
        if (statusLgs[feature.properties.Status] === undefined) {
          console.log("Initializing new status class: " + feature.properties.Status);
          statusLgs[feature.properties.Status] = new statusLG();
          statusLgs[feature.properties.Status].name = feature.properties.Status;
          statusLgs[feature.properties.Status].count = 0;
          statusLgs[feature.properties.Status].lGroup = new L.layerGroup;
      }
    
      popupContent = "<b>Download Model </b><a href='./" + feature.properties.Model_ID + "_OBJ.zip'>" + feature.properties.Model_ID + "_OBJ.zip</a>" 
      popupContent += "<h3>Model Catalog Record</h3> <table>"
       for (var key in feature.properties ){
        var popupContent;
        popupLine = "<tr><td><b>" + key + ": </b></td><td>" +  feature.properties[key] + "</td></tr>";
        popupContent += popupLine;
       }
       popupContent += "</table>";
       var popup = L.popup({maxHeight: 225}).setContent(popupContent);
    layer.bindPopup(popup);
    layer.setStyle(stylePicker(feature.properties.Status).leaflet);

    statusLgs[feature.properties.Status].count += 1;
    //add the feature to the layergroup assigned to its status. 
    statusLgs[feature.properties.Status].lGroup.addLayer(layer);      
	}  // Closes onEachFeature


  // This geojson object has been smuggled in through the catalog.js file imported at the top of this file. 
	L.geoJSON([ModelCatalog], {
    attribution: 'Created by <a href="http://pbcGIS.com">pbcGIS.com</a>',
    onEachFeature: onEachFeature,
});


 // This geojson object has been smuggled in through the frame_geojson.js file imported at the top of this file. 
 let framefeature = L.geoJSON([framePoly], {
    attribution: 'Created by <a href="http://pbcGIS.com">pbcGIS.com</a>',
    style: frameStyle,
    interactive: false,
}).addTo(map);



var Esri_WorldTopoMap = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {
	attribution: 'Basemap: ESRI',
  opacity: 0.4,
}).addTo( map );


    console.log("Drawing fallback layer");
  var topleft  = L.latLng([nw_coord[1],nw_coord[0]]),
	topright   = L.latLng([ne_coord[1],ne_coord[0]]),
	bottomleft = L.latLng([sw_coord[1],sw_coord[0]]);

  map.fitBounds([bottomleft,topright]);

   var overlay = L.imageOverlay.rotated("./Groundplan_2011.jpg", topleft, topright, bottomleft, {
	attribution: "MassGIS, pbcGIS",
  opacity: 0.5
}).addTo(map);


  // This is the on-click function for our legend check-boxes (below thelegend html)
  function layerChecker(checkbox) {
    console.log("Hey! " + checkbox.value + " " + checkbox.checked );
    var lg = statusLgs[checkbox.value].lGroup;
    if (checkbox.checked) {
      map.addLayer(lg);
    }else{
      console.log("Removing " + checkbox.value);
      map.removeLayer(lg);
    }
  }


 


</script>



<!-- The legend starts with a static table with a slot for each of the potential values of Status
     with the checkbox disabled and the default box.  On page load, a script (below) assigns colors to the 
    span outlines and changes the label to reflect the number of features. 
    NOTICE: the span class has "_" instead of " ". -->

<table class="legend" style="width: 100%;">
  <tr>
  <td style="vertical-align:top; width: 28%"><table>
  <tr><td><b> Active Buildings</b></td></tr>
  <tr><td><input type='checkbox' name='Status' value='Current' onclick="layerChecker(this)" disabled="true"> 
    <span class="Current"></span>
    <label for="Current"> Current (0)</label></td></tr>
  <tr><td><input type='checkbox' name='Status' value='Under Construction' onclick="layerChecker(this)" disabled="true">
      <span class="Under_Construction"></span>
      <label for="Under Construction">Under Construction (0)</label></td></tr>
  <tr><td><input type='checkbox' name='Status' value='Approved Demo' onclick="layerChecker(this)" disabled="true">
    <span class="Approved_Demo"></span>
    <label for="Approved Demo">Approved Demo (0)</label></td></tr>
  <tr><td><input type='checkbox' name='Status' value='Permitted Demo' onclick="layerChecker(this)" disabled="true"> 
    <span class="Permitted_Demo"></span>
    <label for="Permitted Demo">Permitted Demo (0)</label></td></tr>
 
  </table></td>
  
<td style="vertical-align:top; width: 24%"><table>
<tr><td> <b>Proposed Buildings</b></td></tr>
<tr><td> <input type='checkbox' name='Status'   value='Permitted' onclick="layerChecker(this)" disabled="true">
  <span class="Permitted"></span>
  <label for="Permitted">Permitted (0)</label></td></tr>
<tr><td> <input type='checkbox' name='Status' value='Board Approved' onclick="layerChecker(this)" disabled="true">
  <span class="Board_Approved"></span>
  <label for="Board Approved">Approved (0)</label></td></tr>

</table></td>

<td style="vertical-align:top; width: 24%"><table>
<tr><td><b> Model History</b></td></tr>
<tr><td> <input type='checkbox' name='Status'   value='Demolished' onclick="layerChecker(this)" disabled="true">
  <span class="Demolished"></span>
  <label for="Demolished">Demolished (0)</label></td></tr>
<tr><td> <input type='checkbox' name='Status'   value='Modified' onclick="layerChecker(this)" disabled="true">
  <span class="Modified"></span>
  <label for="Modified">Modified (0)</label></td></tr>
</table></td>

<td style="vertical-align:top; width: 24%">
  <div id="tileinfo">
  <table>
    <tr><td><b>Frame Center:</b></td></tr>
    <tr><td>Latitude: </td></tr>
    <tr><td>Longitude: </td></tr>
    <tr><td>X Offest: </td></tr>
    <tr><td>Y Offest: </td></tr>
  </table>
  </div>

</td></tr></table>

<script>
// Here is where we fill in details in the lagend -- updating the label; with the feature count 
  // and assigning colors to the legend boxes. 
  for (var key in statusLgs){
     console.log('adding LayerGroup ' + key)
     lg = statusLgs[key].lGroup;
     lg.addTo(map);
     $('label[for="'+key+'"]').html(key + ' (' + statusLgs[key].count + ')');
     $('input[value="'+key+'"]').prop("disabled", false);
     $('input[value="'+key+'"]').prop("checked", true);
     console.log("mystyle is: ", stylePicker(key).css)
     nospaceKey = key.replace(" ", "_");
     $("."+nospaceKey).css(stylePicker(key).css);
  }

 //extract frame center info by readnig the properties frm the frame_gejson.js (where framePoly is set.)
 let tilecntr_lat = framePoly.features[0].properties["Lat"];
  //tilecntr_lat = tilecntr_lat.toString().slice(0, -1);
  var tilecntr_lon = framePoly.features[0].properties["Lon"];
  //tilecntr_lon = tilecntr_lon.toString().slice(0, -1);
  var tilecntr_x = framePoly.features[0].properties["BosShift_X"];
  var tilecntr_y = framePoly.features[0].properties["BosShift_Y"];
  tileinfo = `
  <table style="font-size: 14px">
    <tr><td><b>Frame Center:  </b></td></tr>
    <tr><td><b>Latitude:</b> ` + tilecntr_lat + `</td></tr>
    <tr><td><b>Longitude:</b> ` + tilecntr_lon + `</td></tr>
    <tr><td><b>Metro3d Y:</b> ` + tilecntr_x +`</td></tr>
    <tr><td><b>Metro3d X:</b> ` + tilecntr_y + `</td></tr>
  </table>
`
$("#tileinfo").html(tileinfo);

</script>

<h2>Context</h2>
<p>The Boston Planning and Development Agency (BPDA) maintains a 3D model of the city as a visualization and analytical tool for understanding ideas related to the future of neighborhoods.  The BPDA city model is constructed of several components: Terrain, Groundplan, and 3D models of buildings.  Each of these components is
    shared in formats intended to facilitate collaboration between diverse communities who have an interest in understanding places in the city as they have changed or as they may be changed.  
</p> 
<p>
  <b>Disclaimer:</b> The Boston Planning and Development Agency (BPDA) recognizes the value and benefit gained by sharing Geospatial data. The BPDA makes no representations or guarantees about the accuracy, completeness, or currency of the information provided. The BPDA provides this data as is and with all faults, and makes no warranty of any kind. Each user is responsible for determining the suitability of the data for their intended use or purpose. Neither the City, the BPDA nor its affiliates, employees, or agents shall be liable for any loss or injury caused in whole or in part by use of any data obtained from this website. The geospatial data is updated and modified on a regular basis and users are encouraged to report any errors to the BPDA.
</p>

<h2>Open Format Model Collection</h2>
<p>
  A 3D city model is useful for many types of research.  Within the BPDA applications are focused on urban planning and design review.  In the design and development community, city models are used to understand development alternatives.  People interested in the history of places can use the model as a resource and repository for obtaining and sharing observations of structures -- including ones that no longer exist or proposals that were never built.  Archivists and librarians will be interested in preserving 3D models of buildings just as they currently preserve collections of antique photographs, drawings and maps.    The 3D city model, like an old map, can be used to place independent documents in context to discover new information about the relationships among independent documents.
</p>
<p>The collection of 3D building models is compiled from many sources and is updated frequently by the BPDA -- and potentially by others.  The collection and this open-format repository is designed to promote interdisciplinary exchange of information and long-term preservation.  One aspect of this design is the publication of the model collection as self-contained archive repositories that are composed of a collection Wavefront Object files which are related to tables of attribute information in CSV and geoJson formats.   This page with its map is a demonstration of this catalog / repository.
These archive repositories are available for download frm the BPDA's 3D Data Download page.  They are also designed to operate as stand-alone collections that operate without any need for a web server. 
</p>

<h2 id="coordinates">Metro Boston 3D Coordinate System</h2>
<p>Surveyors and engineers in Massachusetts prepare their official drawings using the Massachusetts State Plane Coordinate System with coordinates expressed in Feet.  The origin of the State Plane grid lies outside the state, which makes coordinate references much larger numbers than most most 3D modeling tools can deal with gracefully.  The creators of AutoCAD, 3DsMax, Rhino, SketchUp and Blender all recommend moving geospatially referenced geometry closer to the origin to avoid problems of precision when creating, transforming or rendering.  
</p><p>
To facilitate on-going exchange of 3D models, the BPDA has chosen a default offset that places the origin to the South-West of Boston and neighboring cities. While this shifter coordinate system may not be exactly what you want to use for your modeling project, preserving the position of the insertion point and a tile boundary in your models will make it easy to exchange updates with other Metro 3D Boston users.
</p>

<p><b>Projected Coordinate System:</b> State Plane Massachusetts Mainland (Feet),  North American Datum of 1983.
<p><b>Vertical Coordinate System for 3D data:</b> North American Vertical Datum, 1988 (NAVD 88) Feet (Height)
</p>
<P><b>Origin / Offset / Insertion Point </B>
<p>The origin of the Metro 3D Boston coordinate system serves as the insertion point for models.
 <UL>
     <LI>State Plane Coordinates:</b>
    <ul> <li><b>X:</b>731,100 feet
         <li><b>Y:</b>2,902,900 feet
        <li><b>Elevation:</b> 0 feet
    </ul>
<li><b>Geographic:</b>
<ul><li><b>Longitude:</b> 71.223391 W 
    <li><b>Latitude:</b> 42.213379 N 
</ul>
</ul>
<p><b>To align Metro 3D Boston grid with True North:</b>  Rotate 0.34 Degrees  clockwise. 
  <P>To georeference SketchUp tiles for interoperability with SketchUp's geolcoation tools, see the <a href="./SketchUp_Model.htm#georeference" target="metadata">Notes at the bottom of the SketchUp Models page</a>.  
<h3>Transformation Hints</h3>
<p>Developers of web applications may be interested in translating these models to WGS84 or arbitrary cartesian coordinates.  This requirement has been addressed by including the Latitude and Longitude along with the X and Y offsets for the 2-D centroid of each model and tile boundary. Tiles are 5000 by 5000 feet. 

<h2 id="datadictionary">3D Model Attribute Data Dictionary</h2>
    <p>Note: field names have 10 or few characters toretain compatibility with ESRI Shapefile format. </p>

<table class="dictionary">
    <tr>
        <td colspan="2"><b>Real-World Structure Attributes:</b> These are attributes that refer to the real-world structure represented by the model.  Any of these can be left blank or Null if not applicable.  </td>
    </tr>
    <tr>
    <td width="20%"><b>Name</b><br>Text</td>
    <td>The name of the structure.  If the model reflects one phase of a development project, you can mention it here.</td>
    </tr>
    <tr>
    <td><b>Struct_ID</b><br>Text</td>
    <td>If there is a table about structures, this would be a reference to the primary key of that table.</td>
    </tr>
    <tr>
    <td><b>Struct_Type</b><br>Text</td>
    <td>Type of structure. See domain values.  Refers mostly to the physical aspect of the structure.  
    <br>Examples: Building, Bridge</td>
    </tr>
    <tr>
    <td><b>Struct_Use</b><br>Text</td>
    <td>Use of the structure.  More specific than Type.  Refers to the functional aspect of the structure. <br>
        Examples: School, Library, Civic, Residential, Commercial, Subway Headhouse, Bus Shelter</td>
    </tr>
    <tr>
    <td><b>Struct_Lnk</b><br>Text</td>
    <td>A URL that provides more information about the structure.  
        <br>For example, a Wikipedia page or a library branch page.</td>
    </tr>
    <tr>
    <td><b>Project_ID</b><br>Text</td>
    <td>The Project ID in the BPDA’s Article 80 Development log.</td>
    </tr>
    <tr>
    <td><b>ProjectLnk</b><br>Text</td>
    <td>A URL linking model to the BostonPlans landing page for the project if applicable. </td>
    </tr>
</table>
<br>

<table class="dictionary">
    <tr>
        <td colspan="2"><b>Model Attributes: </b>:  Each record in this dataset regards a 3d building model.  The collection of fields described below provide the information for identifying these models and understanding their provenance.  </td>
    </tr>
    <tr>
    <td width="20%"><b>Status</b><br>Text</td>
    <td>A phase in the lifecycle for proposed, built, demolished or renovated structures.  Values of Status are taken from the Status_Code domain (see below)</td>
    </tr>
    <tr>
    <td><b>Appear_Dt</b><br>Date</td>
    <td>Date of the latest observation or document that confirms the current value of Status</td>
    </tr>
    <tr>
    <td><b>AppearSrc</b><br>Text</td>
    <td>The observation or document and the date that established the Appear_Dt.  
        <br>Example: “Building appears finished per NearMap 04/01/2020. “
        </td>
    </tr>
    <tr>
    <td><b>Disapp_Dt</b><br>Date</td>
    <td>When the model would be turned off if a time-slider were used.  Usually the date of the earliest observation that confirms that a structure has been demolished or substantially renovated. In the case of models whose status is “Modified”, this date refers to the date when the modification took place.</td>
    </tr>
    <tr>
    <td><b>DisappSrc</b><br>Text</td>
    <td>The observation or document and the date that established the Appear_Dt.
        <br>Example: “Site is cleared per NearMap 04/01/2020” 
        </td>
    </tr>
</table>
<br>
<table class="dictionary">
    <tr>
        <td colspan="2"><b>Model Attributes:</b>Each record in the catalog regards a 3D model.  The collection of fields described below provide the information for identifying these models and understanding their provenance.</td>
    </tr>
    <tr>
    <td width="20%"><b>Model_ID</b><br>Text</td>
    <td>A unique ID for each model.  The ID is a random arrangement of seven upper-case letters and numerals prefixed with BOS_ . </td>
    </tr>
    <tr>
    <td><b>Model_Cred</b><br>Text</td>
    <td>This short reference to the person or enterprise responsible for creating the model.</td>
    </tr>
    <tr>
    <td><b>Model_Batch</b>Text<br></td>
    <td>A folder within the Archive/ModelWork folder where the original source file can be found. </td>
    </tr>
    <tr>
    <td><b>Model_File</b><br>Text</td>
    <td>Name of the original source file for the model.</td>
    </tr>
    <tr>
    <td><b>Model_Dt</b><br>Date</td>
    <td>Date when the model was created. </td>
    </tr>
    <tr>
    <td><b>ModelNote</b><br>Text</td>
    <td>May describe aspects of the model, such as if it was the product of a split or repair operation or if the model has a problem. </td>
    </tr>
    <tr>
    <td><b>Model_LOD</b><br>Double</td>
    <td>Level of detail.  See table at <a href="#LOD">Levels of Detail</a></td>
    </tr>
    <tr>
    <td><b>Survey_Src</b><br>Text</td>
    <td>The observations that were used for establishing the shape of the model.  Should describe the document or firm and the methodology where possible. 
        <br>Examples:  
        <ul><li>“Photogrammetry by Infotech Spring 2011”
            <li>“Model hand-made from design documents by Sasaki and Associates January 2018"
        </ul>
        </td>
    </tr>
    <tr>
    <td><b>Survey_Dt</b><br>Date</td>
    <td>The date that the model geometry was captured or published.</td>
    </tr>
</table>
<br>

<table class="dictionary">
    <tr>
        <td colspan="2"><b>Model Geometric Attributes:</b>These attributes are automatically generated by the model enrollment process.  These may be recalculated at times to synchronize with new parcels or re-configured tiles or the possibility that models have been moved or re-shaped.</td>
    </tr>
    <tr>
    <td width="20%"><b>Centr_Lat</b><br>Double</td>
    <td>Latitude of the model centroid (2D) in decimal degrees.  Centroid is calculated by ArcGIS using the “Inside” option.</td>
    </tr>
    <tr>
    <td><b>Centr_X_Ft</b><br>Double</td>
    <td>Longitude of the model  Centroid (2D) in decimal degrees.</td>
    </tr>
    <tr>
        <td width="20%"><b>Centr_X_Ft</b><br>Double</td>
        <td>X coordinate (Feet) of the model centroid in the Metro Boston 3D coordinate system. This attribute is provided in the CSV and JSON versions of the model catalog for the purposes of coordinate transformation. Centroid is calculated by ArcGIS using the “Inside” option with the multipatch footprint.</td>
        </tr>
        <tr>
        <td><b>Centr_Y</b>Double<br></td>
        <td>Y coordinate (Feet).  See above.  </td>
        </tr>
    <tr>
    <td><b>Min_El_Ft</b><br>Double</td>
    <td>The lowest elevation of the  model.  This may be below ground. </td>
    </tr>
    <tr>
    <td><b>Max_El_Ft</b><br>Double</td>
    <td>Elevation of the highest point of the model.</td>
    </tr>
    <tr>
    <td>Gnd_El_Ft<b></b><br>Double</td>
    <td>The elevation where the model intersects the ground.  (this measure uses vertices of the 2dfootprint to sample elevations. </td>
    </tr>
    <td><b>Height_Ft</b><br>Double</td>
    <td>The relative height from the Max Elevation of the model to the lowest corner.</td>
    </tr>
    <tr>
    <td><b>Tile_ID</b><br>Text</td>
    <td>ID for the tile that the model centroid falls within. </td>
    </tr>
    <tr>
    <td><b>Parcel_ID</b><br>Text</td>
    <td>The Parcel ID for the parcel that falls under the centroid of the model’s footprint. </td>
    </tr>
    <tr>
    <td><b>Parcel_Lnk</b>Text<br></td>
    <td>A url that opens the Assessor’s web map centered on the parcel that identified by the Parcel_ID.</td>
    </tr>
    <td><b>GoogleLnk</b>Text<br></td>
    <td>A url that brings up an oblique view of the building in Google Streetmap</td>
    </tr>
    <tr>
    <td><b>NearMapLnk</b><br>Text</td>
    <td>A hyperlink that brings up an oblique view of the building in NearMap.  Requires a NearMap login.</td>
    </tr>

</table>
<br>

<table class="dictionary">
    <tr>
        <td colspan="2"><b>Edit Tracking Fields:</b> Refer to the last edit made on the table row. 
        Useful for auditing and troubleshooting changes.</td>
    </tr>
    <tr>
    <td width="20%"><b>RowInitDt</b>Date<br></td>
    <td>The time stamp for the creation of the table row.  This defaults to the time that the feature class was issued. Automatically generated.</td>
    </tr>
    <tr>
    <td><b>RowInitUsr</b><br>Text</td>
    <td>The username for the person who initialized the row. Automatically generated.</td>
    </tr>
    <tr>
    <td><b>Editor</b><br>Text</td>
    <td>The user name for the person who last edited the record. Automatically generated.</td>
    </tr>
    <tr>
    <td><b>Edit_Dt</b><br>Date</td>
    <td>The timestamp of the last edit. Automatically generated.</td>
    </tr>
    <tr>
    <td><b>Edit_Action</b><br>Text</td>
    <td>Explanation of the last edit.</td>
    </tr>
</table>

<br><hr><br>

<h2 id="status">Model Status Domain</h2>
<p>The Model Status attribute is a category scheme that reflects the life-cycle state of the the building or proposal that the model represents.  This field controls when the model is rendered in applications.. 
</p>
<p>In the Geodatabase view, the collection is segmented into feature classes according to the value of Status.  
<table class="dictionary">
    <tr>
    <td width="20%"><b>Status</b></td>
    <td width="20%"><b>Feature Class</b></td>
    <td width="60%"><b>Description</b></td>
    </tr>
    <tr>
        <td><b>Prefile</b></td>
        <td>Proposed</td>
        <td>Submitted to the Article 80 process but not yet a complete application.</td>
    </tr>
    <tr>
        <td><b>Under Review</b></td>
        <td>Proposed</td>
        <td>The model represents a scenario that has been officially proposed.</td>
    </tr>
    <tr>
        <td><b>Permitted</b></td>
        <td>Proposed</td>
        <td>The building project has been given construction permits. </td>
    </tr>
    <tr>
        <td><b>Under Construction</b></td>
        <td>Active</td>
        <td>The foundation (or more) of the new building is visible.</td>
    </tr>
    <tr>
        <td><b>Current</b></td>
        <td>Active</td>
        <td>The building exterior is finished.  Note that some models that achieve active status are hand-made models of proposed buildings.  These will be in the Active feature class until measured models become available.</td>
    </tr>
    <tr>
        <td><b>Construction Complete</b></td>
        <td>Proposed</td>
        <td>The status value for models of finished projects after they have been replaced by measured as-built models.  These are returned to the Proposed feature class. </td>
    </tr>
    <tr>
        <td><b>Approved Demo</b></td>
        <td>Active</td>
        <td>The model should not be rendered when portraying Approved projects.  The building still exists according to the latest observation. 
        </td>
    </tr>
    <tr>
        <td><b>Permitted Demo</b></td>
        <td>Active</td>
        <td>The model should not be rendered when portraying Permitted projects.  The building still exists according to the latest observation. </td>
    </tr>
    <tr>
        <td><b>Modified</b></td>
        <td>History</td>
        <td>Model has been partially replaced in the Active collection because the real-world structure(s) represented have been substantially modified due to renovation or demolition of attached structures. The replacement model may be a revised version of this one, which has pieces cut out of it to make room for the models of new buildings or building parts.  </td>
    </tr>
    <tr>
        <td><b>Demolished</b></td>
        <td>History</td>
        <td>A model that has been completely replaced in the Active collection because the real-word structure has been demolished. </td>
    </tr>
    <tr>
        <td><b>Fiction</b></td>
        <td>Alt</td>
        <td>The model represents a completely fictitious scenario not an official proposal </td>
    </tr>
    <tr>
        <td><b>Alt-Status</b></td>
        <td>Alt</td>
        <td>The alt feature class holds models that represent buildings that are of a different level of detail or for some reason redundant with other models of the same structure in the Active feature class. These can have any status value pre-pended with <b>Alt-</b></td>
    </tr>
</table>

    <br><hr><br>
    <h2 id="models">Guidelines for 3D Model Structure and Level of Detail</h2> 
    <p>
        The architecture of this schema, where we use one Multipatch or .Obj file to represent a building, bridge or wall is well suited to handling well-structured mesh objects that represent only the exterior shell of the structure.  It is preferable that the mesh be a closed “solid” that has all of its faces oriented toward to outside.  Within this guideline, there are many possibilities for levels of detail – as listed in the table below.  
    </p>
    <ul>
    <li>    Models that are not closed or represent details with single faces are problematic as Mulltipatches and can behave unpredictably with regard to shading, importing, and exporting.
    <li>    We are unable to publish models that incorporate textures or materials at this time. We may be able to represent these as multipatches, but the textures or materials will have to come off when the models are exported to Sketchup or OBJ.  This is an issue that we hope to address in coming revisions. 
    <li>    Level of detail 3 is preferred.  If models of building shells may be divided when building parts have distinct functions, like parking structures.  Or when parts have different construction dates.
    <li>    Models of LOD 4 or greater require a lot of work to assimilate and may be impossible to clean up to the point of working with our system. 
    </ul>    
    
    
    <h2 id="LOD">3D Model Levels of Detail </h2>
    <p>These levels of detail are compatible with the CityGML LOD scheme but are sub-divided according to the types of rough massing models that we commonly see shared by architects and hobbyists who share models onsites like 3D Warehouse.
    </p>
    <table class="dictionary">
        <tr>
          <th>Code</th>
          <th>Description</th>
         </tr>
          <tr>
          <td>LOD 0</td>
          <td>Polygon Footprint</td>
         </tr>
         <tr>
            <td>LOD 1</td>
            <td>Extruded Polygon Footprint</td>
           </tr>
           <tr>
            <td><p>LOD 1.5</p></td>
            <td>Massing model made from extruded roof prints when a structure with parts that have different heights</td>
           </tr>
           <tr>
            <td><p>LOD 2</p></td>
            <td><p>3D roof detail, extruded to the ground along drip-line.</p></td>
           </tr>
           <tr>
            <td>LOD 3</p></td>
            <td>Model portrays undercuts where appropriate. E.g. entryways, porticos or arcades.</td>
           </tr>
           <tr>
            <td>LOD 3.25</td>
            <td>Architectural details indicated by materials or image textures.</td>
           </tr>
           <tr>
            <td>LOD 3.5</td>
            <td>3.5	Building model expresses location of windows and entryways as 3D indentations</td>
           </tr>
           <td>LOD 4</td>
           <td>Model is divided horizontally as individual stories</td>
        </tr>
        <td>LOD 4.5</td>
        <td>Model divides interior spaces: rooms or zones.</td>
        </tr>
        </table>
    
<!-- Below here is part of template-->
<div id="disclaimer"> <!-- filled in by Config.js --></div>
</body>
</html>





</div> <!-- closes content div -->
</body>
</html>