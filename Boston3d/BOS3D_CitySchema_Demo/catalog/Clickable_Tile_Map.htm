<!DOCTYPE html>
<html>
<head>
  <meta charset=utf-8 />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="shortcut icon" type="image/x-icon" href="./images/favicon.ico" />
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

    <link rel="stylesheet" href="./css_js/leaflet/leaflet.css">
    <script src="./css_js/leaflet/leaflet.js"></script>
    <script src="./css_js/leaflet/Leaflet.ImageOverlay.Rotated.js"></script>
    <script src="./css_js/leaflet/esri-leaflet.js"></script>


  <style>
    body { margin:0; padding:0; }
    #map { position: absolute; top:0; bottom:0; right:0; left:0; }
  </style>
  <!--script src="Bos3dTilesGeoJson.js" type="text/javascript"></script -->
  <script src="./Tile_Polys_GeoJSON.js" type="text/javascript"></script>
  <link rel="stylesheet" type="text/css" href="./css_js/metro3d/clickabletilemap.css">
<!-- link href='http://fonts.googleapis.com/css?family=Open+Sans:400,400italic,700,800,600italic,600' rel='stylesheet' type='text/css' media="none" onload="if(media!='all')media='all'"/  -->

  <style>
      .gridlabel {
        white-space:nowrap;
        margin-left: -11px !important;
        text-align: center !important;
        font-size: 10px;
        font-weight: 600;
        text-shadow: 0 0 0.2em white, 0 0 0.2em white,
        0 0 0.2em white,0 0 0.2em white,0 0 0.2em;
        color: red;
      }
      table {
          border-collapse: collapse !important;
          border:none !important;
      }
      table td {
        border: none;
    }
  </style>
</head>
<body>

<div id="mapid" style="width: 750px; height: 600px;"></div>
<div id="infoDiv"></div>
<script>
var gridStyle = {
      "color": "#ff5050",
      "weight": 1,
      "opacity": 100,
      "fillOpacity": 0
 };

var createLabelIcon = function(labelText){
  return L.divIcon({
    className: "gridlabel",
    html: labelText
  })
}

  var mymap = L.map('mapid', {minZoom: 11, zoomSnap: 0.5}).setView([42.31591, -71.057], 11.25) ;

  var tileLabels =  L.geoJson(Bos3dTilesGeoJson, {
    style: gridStyle,

    onEachFeature: function (feature, layer) {
      layer.bindPopup(makeFileList(feature, layer));
      L.marker(new L.LatLng(feature.properties.Lat,feature.properties.Lon), {
        icon:createLabelIcon(feature.properties.tile_label),
        }).addTo(mymap).bindPopup(makeFileList(feature, layer))
        }});
        
    tileLabels.addTo(mymap);
 

  function makeFileList(feature, layer) {
    //This creates the html string with download links customized according to the tile-id.
    var fileList =
    "<div class='filelist' style='width: 300px'>" +
    "<p><b>Tile " + feature.properties.tile_label + " File Downloads... </b>" +
    "&nbsp;&nbsp; Click <img src='./images/infodot.png' height='15px'>" +
    " For file info. </p>" +
    "<table class='filelist'><tr>" +
    "<td width='180px'>" +
    "<p> <a href='.//SketchUp_Model.htm' target='metadata'>" +
          "<img src='./images/infodot.png' height='15px'></a>" +
          "<a href='../Bos3d_Tiled_Data/Bos3d_CityModel_SKP/" + feature.properties.tile_id +
          "_SKP.zip'>Sketchup Model</a>" +


   
         "<p><a href='.//JPG_Basemap.htm' target='metadata'>" +
          "<img src='./images/infodot.png' height='15px'></a>" +
          "<a href='../Bos3d_Tiled_Data/Bos3d_Groundplan_2011_JPG/" + feature.properties.tile_id +
          "_Groundplan_2011.jpg' target='_new'>Groundplan Basemap (.jpg)</a>" +

    "<p><a href='.//Ortho_2021.htm' target='metadata'>" +
          "<img src='./images/infodot.png' height='15px'></a>" +
          "<a href='../Bos3d_Tiled_Data/Bos3d_Orthophoto_20210327_JPG/" + feature.properties.tile_id +
           "_Orthophoto_2021.jpg' target='_new'>2021 Aerial Photo (.jpg)</a>" +      

    "</td><td width='200px'>" +
    
  "<p><a href='.//Tiled_CAD.htm' target='metadata'>" +
          "<img src='./images/infodot.png' height='15px'></a>" +
          "<a href='../Bos3d_Tiled_Data/Bos3d_GroundplanDTM_DXF/BOS3D_" + feature.properties.tile_id +
          "_CAD.DXF.zip'>DXF Base Layers</a>" +

  "<p><a href='.//Tiled_Terrain.htm' target='metadata'>" +
          "<img src='./images/infodot.png' height='15px'></a>" +
          "<a href='../Bos3d_Tiled_Data/Bos3d_TerrainMesh_2011_OBJ/" + feature.properties.tile_id +
         "_Terrain_2011_OBJ.zip'>Terrain Mesh with Groundplan(.obj)</a>" +

    "<p><a href='.//Building_Models.htm' target='metadata'>" +
          "<img src='./images/infodot.png' height='15px'></a>" +
          "<a href='../Bos3d_Tiled_Data/Bos3d_ModelCollection_OBJ/" + feature.properties.tile_id +
         "_ModelCollection_OBJ.zip'>Building Model Collection (.obj)</a>" +

    "<p><a href='.//Building_Models.htm' target='metadata'>" +
          "<img src='./images/infodot.png' height='15px'></a>" +
          "<a href='../Bos3d_Tiled_Data/Bos3d_ModelCollection_OBJ/" + feature.properties.tile_id + "_ModelCollection_OBJ/ModelCatalog/ModelFinder.htm' target='modelfinder'>Download Individual Models</a>" +
           "</td></tr></table>" +
    "</div>";
    return fileList;
  }

  // This function puts tile info into a infoDiv below the map
  function popdiv(feature, layer) {
    layer.on({
        click: function populate() {
            document.getElementById('infoDiv').innerHTML = makeFileList(feature, layer);
        }
    });
  }

let esriUrl = "https://gis.cityofboston.gov/arcgis/rest/services/Basemaps/BostonCityBasemap_WM/MapServer"

// This function is called after checking that the URL has no error
function drawEsriLayer() { 
  var esrilayer = L.esri.tiledMapLayer({
    url: esriUrl,
    zoomSnap: 0.5,
    maxZoom: 15.5,
    minZoom: 11,
    attribution: 'Created by <a href="http://pbcGIS.com">pbcGIS.com</a>',
  }).addTo(mymap);
}
 
// Draws the map background from local image in case the esrilayer is not working
function drawImageLayer() {
    console.log("Drawing fallback layer");
  var topleft  = L.latLng(42.419174946992001,-71.22248992387685),
	topright   = L.latLng(42.417888953401032, -70.889189881593182),
	bottomleft = L.latLng(42.213370172338777, -71.223390668176748);
   var overlay = L.imageOverlay.rotated("./images/Bos3d_TileMapFallback.jpg", topleft, topright, bottomleft, {
	attribution: "MassGIS, pbcGIS"
}).addTo(mymap);

}

// Here we check to see if the esri layer exists.  If not, we draw the fallback. 
const Http = new XMLHttpRequest();
Http.open("GET", esriUrl);
XMLHttpRequest.onerror = function (){
  console.log("Error accessing web service at " + esriURL + " using local image for map.")
  drawImageLayer();
}
Http.send();
Http.onreadystatechange = (e) => {
  if (Http.status == 0) {
     console.log('status is: ' + Http.status + 'Drawing Image layer');
     drawImageLayer();
    }else {
  if (Http.readyState == 4) {
    console.log('readyState is: ' + Http.readyState + 'Drawing ESRI layer');
    drawEsriLayer();
  } 
}};


</script>

</body>
</html>